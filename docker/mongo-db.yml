version: "3.5"
services:
  examplejava-mongodb-service:
    image: mongo
    container_name: examplejava-mongodb-only
    volumes:
      - ./database/mongodb:/data/db
    environment:
      MONGO_INITDB_DATABASE: examplejava-db
      MONGO_INITDB_ROOT_USERNAME: examplejava-usr
      MONGO_INITDB_ROOT_PASSWORD: examplejava-psw
    ports:
      - 27017:27017
    command: [--auth]
    # volumes:
    #   - ./database/mongodb/scripts/001_users.js:/docker-entrypoint-initdb.d/001_users.js:ro
    #   - ./database/mongodb/data/:/data/db
    tty: true
    restart: always
#  examplejava-mongodb-express-service:
#    image: mongo-express
#    container_name: examplejava-mongodb-express
#    restart: always
#    ports:
#      - 8081:8081
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: examplejava-usr
#      ME_CONFIG_MONGODB_ADMINPASSWORD: examplejava-psw
#      ME_CONFIG_MONGODB_URL: mongodb://examplejava-usr:examplejava-psw@examplejava-mongodb-service:27017/
#    links:
#      - examplejava-mongodb-service
#    docker rm -f examplejava-mongodb-only
#    docker run  -p 27017:27017 --name examplejava-mongodb-only -d mongo --auth
#    docker exec -it examplejava-mongodb-only mongo examplejava-db
    #    db.createUser({ user: 'examplejava-usr', pwd: 'examplejava-psw', roles: [ { role: "userAdminAnyDatabase", db: "examplejava-db" } ] });


#    docker exec -it examplejava-mongodb-only mongo admin
    #    db.createUser({ user: 'examplejava-usr', pwd: 'examplejava-psw', roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] });
    #    db.createUser({ user: 'examplejava-usr', pwd: 'examplejava-psw', roles: [ { role: "userAdminAnyDatabase", db: "examplejava-db" } ] });